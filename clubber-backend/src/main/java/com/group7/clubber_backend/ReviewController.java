package com.group7.clubber_backend;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestHeader; // Assuming schema package
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.group7.clubber_backend.Managers.ReviewManager;
import com.group7.clubber_backend.Managers.UserManager;
import com.group7.clubber_backend.Processors.CredentialProcessor;
import com.group7.lib.types.Ids.OrganizationId;
import com.group7.lib.types.Ids.ReviewId;
import com.group7.lib.types.Ids.UserId;
import com.group7.lib.types.Review.Review;
import com.group7.lib.types.Schemas.Reviews.DeleteResponse;
import com.group7.lib.types.Schemas.Reviews.GetAllResponse;
import com.group7.lib.types.Schemas.Reviews.GetByOrganizationResponse;
import com.group7.lib.types.Schemas.Reviews.GetResponse;
import com.group7.lib.types.Schemas.Reviews.PostResponse;
import com.group7.lib.types.Schemas.Reviews.PutResponse;
import com.group7.lib.types.User.User;

@RestController
@RequestMapping("/reviews") // Base path for all review-related endpoints
public class ReviewController {

    private final ReviewManager reviewManager = ReviewManager.getInstance();
    private final UserManager userManager = UserManager.getInstance();
    private final CredentialProcessor credentialProcessor = CredentialProcessor.getInstance();

    // Create a new review for an organization
    @PostMapping
    public PostResponse createReview(@RequestHeader("Authorization") String token,
                                     @RequestParam("organizationId") String organizationIdStr,
                                     @RequestParam("rating") int rating,
                                     @RequestParam("text") String text) {
        if (token == null) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized: Token missing");
        }
        UserId authorUserId = credentialProcessor.verifyToken(token);
        if (authorUserId == null) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized: Invalid or expired token");
        }
        User author = userManager.get(authorUserId);
        if (author == null) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized: User not found");
        }

        OrganizationId organizationId;
        try {
            organizationId = new OrganizationId(organizationIdStr);
        } catch (IllegalArgumentException e) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid organization ID format");
        }

        // Basic validation for rating
        if (rating < 1 || rating > 5) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Rating must be between 1 and 5");
        }

        Review newReview = new Review(
                null, // ID will be generated by the manager
                authorUserId,
                organizationId,
                rating,
                text,
                LocalDateTime.now(),
                LocalDateTime.now()
        );

        ReviewId reviewId = (ReviewId) reviewManager.create(newReview);
        if (reviewId == null) {
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Failed to create review");
        }
        return new PostResponse(reviewId, "Review created successfully"); // Assuming PostResponse schema
    }

    // Get a specific review by its ID
    @GetMapping("/{reviewId}")
    public GetResponse getReviewById(@PathVariable String reviewId) {
        Review review = reviewManager.get(new ReviewId(reviewId));
        if (review == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Review not found");
        }
        return new GetResponse(review); // Assuming GetResponse schema
    }

    // Get all reviews (potentially paginated in a real application)
    @GetMapping
    public GetAllResponse getAllReviews() {
        List<Review> reviews = reviewManager.getAll();
        return new GetAllResponse(reviews); // Assuming GetAllResponse schema
    }

    // Get all reviews for a specific organization
    @GetMapping("/organization/{organizationId}")
    public GetByOrganizationResponse getReviewsByOrganization(@PathVariable String organizationId) {
        // This requires a new search method in ReviewManager, e.g., search("organizationId:" + organizationId)
        // Or a dedicated method like findByOrganizationId(new OrganizationId(organizationId))
        List<Review> reviews = reviewManager.search("organizationId:" + organizationId);
        if (reviews.isEmpty()) {
            // Distinguish between no reviews and invalid organizationId if OrganizationManager.get(orgId) is null
            // For simplicity, returning empty list if no reviews found.
        }
        return new GetByOrganizationResponse(reviews); // Assuming this schema exists
    }

    // Update an existing review
    // Only the author of the review should be able to update it.
    @PutMapping("/{reviewIdStr}")
    public PutResponse updateReview(@RequestHeader("Authorization") String token,
                                  @PathVariable String reviewIdStr,
                                  @RequestParam(value = "rating", required = false) Integer rating,
                                  @RequestParam(value = "text", required = false) String text) {
        if (token == null) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized: Token missing");
        }
        UserId currentUserId = credentialProcessor.verifyToken(token);
        if (currentUserId == null) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized: Invalid or expired token");
        }

        ReviewId reviewId = new ReviewId(reviewIdStr);
        Review existingReview = reviewManager.get(reviewId);

        if (existingReview == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Review not found");
        }

        // Check if the current user is the author of the review
        if (!existingReview.userId().equals(currentUserId)) {
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "Forbidden: You are not the author of this review");
        }

        // Create the updated review object
        // Only update fields if new values are provided
        int newRating = (rating != null) ? rating : existingReview.rating();
        String newText = (text != null) ? text : existingReview.text();

        if (rating != null && (rating < 1 || rating > 5)) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Rating must be between 1 and 5");
        }

        Review updatedReview = new Review(
                existingReview.id(),
                existingReview.userId(),
                existingReview.organizationId(),
                newRating,
                newText,
                existingReview.createdAt(),
                LocalDateTime.now() // Update the updatedAt timestamp
        );

        reviewManager.update(updatedReview);
        return new PutResponse(updatedReview, "Review updated successfully"); // Assuming PutResponse schema
    }

    // Delete a review
    // Only the author or an admin should be able to delete it.
    @DeleteMapping("/{reviewId}")
    public DeleteResponse deleteReview(@RequestHeader("Authorization") String token,
                                       @PathVariable String reviewIdStr) {
        if (token == null) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized: Token missing");
        }
        UserId currentUserId = credentialProcessor.verifyToken(token);
        if (currentUserId == null) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized: Invalid or expired token");
        }

        ReviewId reviewId = new ReviewId(reviewIdStr);
        Review reviewToDelete = reviewManager.get(reviewId);

        if (reviewToDelete == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Review not found");
        }

        // Authorization: Check if current user is the author. 
        // Add admin check if necessary: userManager.get(currentUserId).isAdmin()
        if (!reviewToDelete.userId().equals(currentUserId)) {
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "Forbidden: You are not authorized to delete this review");
        }

        reviewManager.delete(reviewId);
        return new DeleteResponse("Review deleted successfully"); // Assuming DeleteResponse schema
    }
} 