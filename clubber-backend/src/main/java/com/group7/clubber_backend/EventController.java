package com.group7.clubber_backend;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ResponseStatusException;

import com.group7.clubber_backend.Managers.EventManager;
import com.group7.clubber_backend.Managers.FileManager;
import com.group7.clubber_backend.Managers.OrganizationManager;
import com.group7.clubber_backend.Managers.UserManager;
import com.group7.clubber_backend.Processors.CredentialProcessor;
import com.group7.lib.types.Event.Event;
import com.group7.lib.types.Ids.EventId;
import com.group7.lib.types.Ids.FileId;
import com.group7.lib.types.Ids.OrganizationId;
import com.group7.lib.types.Ids.UserId;
import com.group7.lib.types.Organization.Organization;
import com.group7.lib.types.Schemas.Events.GetResponse;
import com.group7.lib.types.Schemas.ListResponse;
import com.group7.lib.types.Schemas.PostResponse;
import com.group7.lib.types.User.User;

@RestController
@RequestMapping("/events")
public class EventController {

    private final EventManager eventManager = EventManager.getInstance();
    private final UserManager userManager = UserManager.getInstance();
    private final OrganizationManager organizationManager = OrganizationManager.getInstance();
    private final CredentialProcessor credentialProcessor = CredentialProcessor.getInstance();
    private final FileManager fileManager = FileManager.getInstance();

    @PostMapping(consumes = {MediaType.MULTIPART_FORM_DATA_VALUE})
    public PostResponse createEvent(
            @RequestHeader("Authorization") String token,
            @RequestParam("organizationId") String organizationId,
            @RequestParam("title") String title,
            @RequestParam("description") String description,
            @RequestParam("location") String location,
            @RequestParam("startTime") String startTime,
            @RequestParam("endTime") String endTime,
            @RequestParam("rsvpLink") String rsvpLink,
            @RequestParam(value = "attachments", required = false) MultipartFile[] attachments) {
        UserId authorUserId = credentialProcessor.verifyToken(token);
        if (authorUserId == null) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized: Invalid or expired token");
        }

        User author = userManager.get(authorUserId);
        if (author == null) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized: User not found");
        }

        Organization organization = organizationManager.get(new OrganizationId(organizationId));
        if (organization == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Organization not found");
        }

        if (organization.adminIds() == null || !organization.adminIds().contains(authorUserId)) {
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "Forbidden: User is not an admin of this organization");
        }

        List<FileId> attachmentIds = new ArrayList<>();
        if (attachments != null && attachments.length > 0) {
            for (MultipartFile attachment : attachments) {
                try {
                    FileId attachmentId = (FileId) fileManager.upload(
                            attachment.getOriginalFilename(),
                            attachment.getInputStream(),
                            attachment.getContentType());
                    attachmentIds.add(attachmentId);
                } catch (IOException e) {
                    throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Failed to upload attachment");
                }
            }
        }

        Event eventToCreate = new Event(
                new EventId(null), // ID will be generated by the manager
                new OrganizationId(organizationId),
                title,
                description,
                location,
                startTime,
                endTime,
                rsvpLink,
                attachmentIds
        );
        EventId eventId = (EventId) eventManager.create(eventToCreate);
        if (eventId == null) {
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Failed to create event");
        }

        List<String> currentEventIdsStr = new ArrayList<>(organization.eventIds() != null ? organization.eventIds() : new ArrayList<>());
        currentEventIdsStr.add(eventId.toString());

        Organization updatedOrganization = new Organization(
                organization.id(),
                organization.name(),
                organization.type(),
                organization.description(),
                organization.contactEmail(),
                organization.recruitingStatus(),
                organization.location(),
                organization.links(),
                organization.memberIds(),
                organization.adminIds(),
                organization.reviewIds(),
                organization.profileImageId(),
                currentEventIdsStr,
                organization.announcementIds()
        );
        organizationManager.update(updatedOrganization);

        return new PostResponse(eventId);
    }

    @GetMapping("/{eventId}")
    public GetResponse getEventById(@PathVariable String eventId) {
        Event event = eventManager.get(new EventId(eventId));
        if (event == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Event not found");
        }
        return new GetResponse(event);
    }

    @GetMapping("/all")
    public ListResponse<GetResponse> getAllEvents() {
        List<Event> events = eventManager.getAll();
        return ListResponse.fromList(events.stream().map(GetResponse::new).collect(Collectors.toList()));
    }

    @GetMapping
    public ListResponse<GetResponse> getEventsByOrganization(
            @RequestParam("organizationId") String organizationIdStr
    ) {
        OrganizationId organizationId = new OrganizationId(organizationIdStr);

        Organization organization = organizationManager.get(organizationId);
        if (organization == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Organization not found for events listing");
        }

        List<String> eventIdStrings = organization.eventIds();
        List<Event> events = new ArrayList<>();
        if (eventIdStrings != null && !eventIdStrings.isEmpty()) {
            EventId[] eventIdsToFetch = eventIdStrings.stream()
                    .map(EventId::new)
                    .toArray(EventId[]::new);
            if (eventIdsToFetch.length > 0) {
                events = eventManager.list(eventIdsToFetch);
            }
        }
        return ListResponse.fromList(events.stream().map(GetResponse::new).collect(Collectors.toList()));
    }

    @PutMapping("/{eventIdStr}")
    public void updateEvent(@RequestHeader("Authorization") String token,
            @PathVariable String eventIdStr,
            @RequestBody Event updatedEventDetails) {
        UserId currentUserId = credentialProcessor.verifyToken(token);
        if (currentUserId == null) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized: Invalid or expired token");
        }

        EventId eventId = new EventId(eventIdStr);
        Event existingEvent = eventManager.get(eventId);

        if (existingEvent == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Event not found");
        }

        Organization organization = organizationManager.get(existingEvent.organizationId());
        if (organization == null) {
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Associated organization not found");
        }

        boolean isAdmin = organization.adminIds() != null && organization.adminIds().contains(currentUserId);

        if (!isAdmin) {
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "Forbidden: You are not authorized to update this event");
        }

        Event eventToUpdate = new Event(
                existingEvent.id(),
                updatedEventDetails.organizationId() != null ? updatedEventDetails.organizationId() : existingEvent.organizationId(),
                updatedEventDetails.title() != null ? updatedEventDetails.title() : existingEvent.title(),
                updatedEventDetails.description() != null ? updatedEventDetails.description() : existingEvent.description(),
                updatedEventDetails.location() != null ? updatedEventDetails.location() : existingEvent.location(),
                updatedEventDetails.startTime() != null ? updatedEventDetails.startTime() : existingEvent.startTime(),
                updatedEventDetails.endTime() != null ? updatedEventDetails.endTime() : existingEvent.endTime(),
                updatedEventDetails.rsvpLink() != null ? updatedEventDetails.rsvpLink() : existingEvent.rsvpLink(),
                updatedEventDetails.attachmentIds() != null ? updatedEventDetails.attachmentIds() : existingEvent.attachmentIds()
        );

        eventManager.update(eventToUpdate);
    }

    @DeleteMapping("/{eventIdStr}")
    public void deleteEvent(@RequestHeader("Authorization") String token,
            @PathVariable String eventIdStr) {
        UserId currentUserId = credentialProcessor.verifyToken(token);
        if (currentUserId == null) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized: Invalid or expired token");
        }

        EventId eventId = new EventId(eventIdStr);
        Event eventToDelete = eventManager.get(eventId);

        if (eventToDelete == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Event not found");
        }

        Organization organization = organizationManager.get(eventToDelete.organizationId());
        if (organization == null) {
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Associated organization not found for deletion");
        }

        boolean isAdmin = organization.adminIds() != null && organization.adminIds().contains(currentUserId);

        if (!isAdmin) {
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "Forbidden: You are not authorized to delete this event");
        }

        eventManager.delete(eventId);

        List<String> currentEventIdsStr = new ArrayList<>(organization.eventIds() != null ? organization.eventIds() : new ArrayList<>());
        currentEventIdsStr.remove(eventId.toString());

        Organization updatedOrganization = new Organization(
                organization.id(),
                organization.name(),
                organization.type(),
                organization.description(),
                organization.contactEmail(),
                organization.recruitingStatus(),
                organization.location(),
                organization.links(),
                organization.memberIds(),
                organization.adminIds(),
                organization.reviewIds(),
                organization.profileImageId(),
                currentEventIdsStr,
                organization.announcementIds()
        );
        organizationManager.update(updatedOrganization);
    }
}
